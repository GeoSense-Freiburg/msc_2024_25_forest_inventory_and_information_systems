library(ggplot2)
library(dplyr)
library(sf)
# Define grid spacing
grid_spacing <- 40  # in meters
# Create a regular grid of points across the field_extent
grid_points <- st_make_grid(field_extent, cellsize = grid_spacing, what = "centers") %>%
st_as_sf() %>%
# Keep only points within the field_extent
st_intersection(field_extent) %>%
mutate(id = row_number())  # Optional: Add an ID for each point
# CRS of tree inventory data
tree_crs <- st_crs(tree_inventory_data)
# Transform grid points to match the CRS of the tree inventory data
grid_points <- st_transform(grid_points, tree_crs)
# Create a buffer around each grid point and union them to avoid overlap
buffered_points <- grid_points %>%
st_buffer(dist = 12) %>%
st_union()  # Combine overlapping buffer areas
# Clip the buffers by the field_extent to keep only buffers inside the field
clipped_buffers <- st_intersection(buffered_points, field_extent)
# Intersect the buffered points with the tree inventory data to find sampled trees
sampled_trees <- tree_inventory_data %>%
st_transform(tree_crs) %>%
st_intersection(clipped_buffers)
# Calculate total basal area from the sampled trees
total_basal_area_sampled <- sum(pi * (sampled_trees$dbh / 200)^2, na.rm = TRUE)
# Calculate the total area of the field_extent
total_area <- st_area(field_extent)
# Calculate the area of the clipped buffers
buffer_area <- st_area(clipped_buffers) %>% sum()
# Scale basal area to the total area of the field_extent
estimated_total_basal_area <- as.numeric(total_basal_area_sampled * (total_area / buffer_area))
# Calculate real total basal area from tree inventory data
real_total_basal_area <- sum(pi * (tree_inventory_data$dbh / 200)^2, na.rm = TRUE)
# Output the estimates
print(paste("Estimated total basal area for the entire area:", estimated_total_basal_area))
print(paste("Real total basal area from tree inventory data:", real_total_basal_area))
# Create a data frame for plotting
basal_area_comparison <- data.frame(
Type = c("Estimated Total Basal Area", "Real Total Basal Area"),
Value = c(estimated_total_basal_area/drop_units(st_area(field_extent) / 10000), real_total_basal_area/drop_units(st_area(field_extent) / 10000))
)
# Plot the estimated vs. real total basal area
ggplot(basal_area_comparison, aes(x = Type, y = Value, fill = Type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Estimated vs. Real Total Basal Area",
x = "Basal Area Type",
y = "Total Basal Area (m2/ha)") +
theme_minimal() +
scale_fill_manual(values = c("Estimated Total Basal Area" = "lightgreen", "Real Total Basal Area" = "salmon"))
# Plot the field extent, grid points, buffered areas, and sampled trees
ggplot() +
geom_sf(data = field_extent, fill = "lightgrey", alpha = 0.5) +  # Field extent
geom_sf(data = grid_points, color = "blue", size = 1, alpha = 0.5) +  # Grid points
geom_sf(data = clipped_buffers, fill = NA, color = "red", linetype = "dashed") +  # Buffered areas (clipped)
geom_sf(data = sampled_trees, color = "green", size = 2) +  # Sampled trees
labs(title = "Grid Points, Buffered Areas, and Sampled Trees",
x = "Longitude", y = "Latitude") +
theme_minimal()
#| label: regular-grid-calculation
#| echo: false
#| message: false
#| warning: false
library(ggplot2)
library(dplyr)
library(sf)
# Define ranges for grid spacing and buffer distances
grid_spacing_values <- seq(20, 50, by = 10)  # in meters
buffer_values <- seq(5, 15, by = 1)  # in meters
# Initialize a data frame to store results
results <- data.frame()
# Loop over each combination of grid spacing and buffer size
for (grid_spacing in grid_spacing_values) {
for (buffer_dist in buffer_values) {
# Create a regular grid of points across the field_extent
grid_points <- st_make_grid(field_extent, cellsize = grid_spacing, what = "centers") %>%
st_as_sf() %>%
st_intersection(field_extent) %>%
mutate(id = row_number())  # Optional: Add an ID for each point
# CRS of tree inventory data
tree_crs <- st_crs(tree_inventory_data)
# Transform grid points to match the CRS of the tree inventory data
grid_points <- st_transform(grid_points, tree_crs)
# Create a buffer around each grid point and union overlapping areas
buffered_points <- grid_points %>%
st_buffer(dist = buffer_dist) %>%
st_union()  # Combine overlapping buffers
# Clip the buffers by the field_extent
clipped_buffers <- st_intersection(buffered_points, field_extent)
# Intersect the clipped buffered areas with the tree inventory data to find sampled trees
sampled_trees <- tree_inventory_data %>%
st_transform(tree_crs) %>%
st_intersection(clipped_buffers)
# Calculate total basal area from the sampled trees
total_basal_area_sampled <- sum(pi * (sampled_trees$dbh / 200)^2, na.rm = TRUE)
# Calculate the total area of the field_extent
total_area <- st_area(field_extent)
# Calculate the area of the clipped buffers
buffer_area <- sum(st_area(clipped_buffers))
# Scale basal area to the total area of the field_extent
estimated_total_basal_area <- as.numeric(total_basal_area_sampled * (total_area / buffer_area))
# Calculate real total basal area from tree inventory data
real_total_basal_area <- sum(pi * (tree_inventory_data$dbh / 200)^2, na.rm = TRUE)
# Store results
results <- rbind(results, data.frame(
Grid_Spacing = grid_spacing,
Buffer_Distance = buffer_dist,
Estimated_Basal_Area = estimated_total_basal_area,
Real_Basal_Area = real_total_basal_area
))
}
}
# Output the results
print(results)
#| label: regular-grid-heatmap
#| echo: false
#| message: false
library(ggplot2)
library(dplyr)
library(reshape2)
# Assuming `results` is structured with columns: Grid_Spacing, Buffer_Distance, and Estimated_Basal_Area
# Reshape results for heatmap
heatmap_data <- dcast(results, Buffer_Distance ~ Grid_Spacing, value.var = "Estimated_Basal_Area")
# Assuming real_total_basal_area is defined earlier
real_total_basal_area <- sum(pi * (tree_inventory_data$dbh / 200)^2, na.rm = TRUE)
# Convert to long format for ggplot
heatmap_long <- melt(heatmap_data, id.vars = "Buffer_Distance", variable.name = "Grid_Spacing", value.name = "Estimated_Basal_Area")
# Calculate the absolute difference from the real basal area and find the minimum
heatmap_long <- heatmap_long %>%
mutate(Distance_to_Real = abs(Estimated_Basal_Area - real_total_basal_area))
# Find the closest basal area value
closest_basal_area <- heatmap_long %>%
filter(Distance_to_Real == min(Distance_to_Real, na.rm = TRUE))
# Create the heatmap
ggplot(heatmap_long, aes(x = Grid_Spacing, y = Buffer_Distance, fill = Estimated_Basal_Area)) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
geom_text(aes(label = round(Estimated_Basal_Area, 1)), color = "white") +  # Add text labels
labs(title = "Estimated Total Basal Area Heatmap",
x = "Grid Spacing (m)",
y = "Buffer Distance (m)",
fill = "Estimated Basal Area (m²)") +
theme_minimal() +
# Highlight the closest basal area
geom_tile(data = closest_basal_area, aes(x = Grid_Spacing, y = Buffer_Distance), fill = NA, color = "red", size = 1.5) +
scale_y_continuous(breaks = seq(1, max(heatmap_long$Buffer_Distance), by = 1))  # Change y-axis breaks to 1
#| label: regular-grid-heatmap
#| echo: false
#| message: false
library(ggplot2)
library(dplyr)
library(reshape2)
# Assuming `results` is structured with columns: Grid_Spacing, Buffer_Distance, and Estimated_Basal_Area
# Reshape results for heatmap
heatmap_data <- dcast(results, Buffer_Distance ~ Grid_Spacing, value.var = "Estimated_Basal_Area")
# Assuming real_total_basal_area is defined earlier
real_total_basal_area <- sum(pi * (tree_inventory_data$dbh / 200)^2, na.rm = TRUE)
# Convert to long format for ggplot
heatmap_long <- melt(heatmap_data, id.vars = "Buffer_Distance", variable.name = "Grid_Spacing", value.name = "Estimated_Basal_Area")
# Calculate the absolute difference from the real basal area and find the minimum
heatmap_long <- heatmap_long %>%
mutate(Distance_to_Real = abs(Estimated_Basal_Area - real_total_basal_area))
# Find the closest basal area value
closest_basal_area <- heatmap_long %>%
filter(Distance_to_Real == min(Distance_to_Real, na.rm = TRUE))
# Create the heatmap
ggplot(heatmap_long, aes(x = Grid_Spacing, y = Buffer_Distance, fill = Estimated_Basal_Area)) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
geom_text(aes(label = round(Estimated_Basal_Area, 1)), color = "white") +  # Add text labels
labs(title = "Estimated Total Basal Area Heatmap",
x = "Grid Spacing (m)",
y = "Buffer Distance (m)",
fill = "Estimated Basal Area (m²)") +
theme_minimal() +
# Highlight the closest basal area
geom_tile(data = closest_basal_area, aes(x = Grid_Spacing, y = Buffer_Distance), fill = NA, color = "red", size = 1.5) +
scale_y_continuous(breaks = seq(1, max(heatmap_long$Buffer_Distance), by = 1))  # Change y-axis breaks to 1
#| warning: false
# Load required libraries
library(sf)
library(dplyr)
library(ggplot2)
# Function to generate random directions for GPS floating effect
shift_coordinates <- function(coords, shift_dist = 2) {
angle <- runif(1, 0, 2 * pi)  # random direction in radians
coords_shifted <- st_coordinates(coords) +
shift_dist * c(cos(angle), sin(angle))  # move coordinates by 1.5m
st_sfc(st_point(coords_shifted), crs = st_crs(coords))
}
# Set up the initial 10 known coordinates inside the field extent
#set.seed(42)  # For reproducibility
initial_coords <- st_sample(field_extent, size = 10, type = "random") %>%
st_as_sf() %>%
st_set_crs(st_crs(field_extent))
# Perform a baseline measurement with the initial coordinates
buffered_points_initial <- initial_coords %>%
st_buffer(dist = 10) %>%
st_union() %>%
st_intersection(field_extent)  # Clip buffers by the field extent
# Ensure both datasets have the same CRS before intersection
if (st_crs(buffered_points_initial) != st_crs(tree_inventory_data)) {
tree_inventory_data <- st_transform(tree_inventory_data, st_crs(buffered_points_initial))
}
# Intersect trees with the initial buffers
sampled_trees_initial <- tree_inventory_data %>%
st_intersection(buffered_points_initial)
# Calculate statistics for the baseline measurement
if (nrow(sampled_trees_initial) > 0) {
mean_dbh_initial <- mean(sampled_trees_initial$dbh, na.rm = TRUE)
total_basal_area_initial <- sum(pi * (sampled_trees_initial$dbh / 200)^2, na.rm = TRUE) / drop_units(st_area(buffered_points_initial)) * 10000
} else {
mean_dbh_initial <- NA
total_basal_area_initial <- NA
}
# Plot the initial measurement for visual understanding
ggplot() +
geom_sf(data = field_extent, fill = "lightgrey", alpha = 0.5) +
geom_sf(data = sampled_trees_initial, color = "green", size = 2) +
geom_sf(data = initial_coords, color = "blue", size = 3) +
geom_sf(data = buffered_points_initial, fill = NA, color = "red", linetype = "dashed") +
labs(title = "Buffer and Trees for Initial Coordinates", subtitle = "Initial Measurement",
x = "Longitude", y = "Latitude") +
theme_minimal()
#| warning: false
# Load required libraries
library(sf)
library(dplyr)
library(ggplot2)
sample_size = 10
buffer_size = 10
# Function to generate random directions for GPS floating effect
shift_coordinates <- function(coords, shift_dist = 2) {
angle <- runif(1, 0, 2 * pi)  # random direction in radians
coords_shifted <- st_coordinates(coords) +
shift_dist * c(cos(angle), sin(angle))  # move coordinates by 1.5m
st_sfc(st_point(coords_shifted), crs = st_crs(coords))
}
# Set up the initial 10 known coordinates inside the field extent
#set.seed(42)  # For reproducibility
initial_coords <- st_sample(field_extent, size = sample_size, type = "random") %>%
st_as_sf() %>%
st_set_crs(st_crs(field_extent))
# Perform a baseline measurement with the initial coordinates
buffered_points_initial <- initial_coords %>%
st_buffer(dist = buffer_size) %>%
st_union() %>%
st_intersection(field_extent)  # Clip buffers by the field extent
# Ensure both datasets have the same CRS before intersection
if (st_crs(buffered_points_initial) != st_crs(tree_inventory_data)) {
tree_inventory_data <- st_transform(tree_inventory_data, st_crs(buffered_points_initial))
}
# Intersect trees with the initial buffers
sampled_trees_initial <- tree_inventory_data %>%
st_intersection(buffered_points_initial)
# Calculate statistics for the baseline measurement
if (nrow(sampled_trees_initial) > 0) {
mean_dbh_initial <- mean(sampled_trees_initial$dbh, na.rm = TRUE)
total_basal_area_initial <- sum(pi * (sampled_trees_initial$dbh / 200)^2, na.rm = TRUE) / drop_units(st_area(buffered_points_initial)) * 10000
} else {
mean_dbh_initial <- NA
total_basal_area_initial <- NA
}
# Plot the initial measurement for visual understanding
ggplot() +
geom_sf(data = field_extent, fill = "lightgrey", alpha = 0.5) +
geom_sf(data = sampled_trees_initial, color = "green", size = 2) +
geom_sf(data = initial_coords, color = "blue", size = 3) +
geom_sf(data = buffered_points_initial, fill = NA, color = "red", linetype = "dashed") +
labs(title = "Buffer and Trees for Initial Coordinates", subtitle = "Initial Measurement",
x = "Longitude", y = "Latitude") +
theme_minimal()
#| warning: false
# Load required libraries
library(sf)
library(dplyr)
library(ggplot2)
sample_size = 20
buffer_size = 10
# Function to generate random directions for GPS floating effect
shift_coordinates <- function(coords, shift_dist = 2) {
angle <- runif(1, 0, 2 * pi)  # random direction in radians
coords_shifted <- st_coordinates(coords) +
shift_dist * c(cos(angle), sin(angle))  # move coordinates by 1.5m
st_sfc(st_point(coords_shifted), crs = st_crs(coords))
}
# Set up the initial 10 known coordinates inside the field extent
#set.seed(42)  # For reproducibility
initial_coords <- st_sample(field_extent, size = sample_size, type = "random") %>%
st_as_sf() %>%
st_set_crs(st_crs(field_extent))
# Perform a baseline measurement with the initial coordinates
buffered_points_initial <- initial_coords %>%
st_buffer(dist = buffer_size) %>%
st_union() %>%
st_intersection(field_extent)  # Clip buffers by the field extent
# Ensure both datasets have the same CRS before intersection
if (st_crs(buffered_points_initial) != st_crs(tree_inventory_data)) {
tree_inventory_data <- st_transform(tree_inventory_data, st_crs(buffered_points_initial))
}
# Intersect trees with the initial buffers
sampled_trees_initial <- tree_inventory_data %>%
st_intersection(buffered_points_initial)
# Calculate statistics for the baseline measurement
if (nrow(sampled_trees_initial) > 0) {
mean_dbh_initial <- mean(sampled_trees_initial$dbh, na.rm = TRUE)
total_basal_area_initial <- sum(pi * (sampled_trees_initial$dbh / 200)^2, na.rm = TRUE) / drop_units(st_area(buffered_points_initial)) * 10000
} else {
mean_dbh_initial <- NA
total_basal_area_initial <- NA
}
# Plot the initial measurement for visual understanding
ggplot() +
geom_sf(data = field_extent, fill = "lightgrey", alpha = 0.5) +
geom_sf(data = sampled_trees_initial, color = "green", size = 2) +
geom_sf(data = initial_coords, color = "blue", size = 3) +
geom_sf(data = buffered_points_initial, fill = NA, color = "red", linetype = "dashed") +
labs(title = "Buffer and Trees for Initial Coordinates", subtitle = "Initial Measurement",
x = "Longitude", y = "Latitude") +
theme_minimal()
#| warning: false
# Define number of iterations (loop runs)
num_iterations <- 10
# Empty list to store results for each iteration
results_list <- vector("list", num_iterations)
# Empty list to store species composition data for each iteration
composition_list <- vector("list", num_iterations)
# Loop to shift coordinates and compute results
for (i in 1:num_iterations) {
# Shift coordinates slightly by 2 meters in a random direction
shifted_coords <- initial_coords %>%
rowwise() %>%
mutate(x = shift_coordinates(x))
# Create buffers of 10m around the shifted coordinates
buffered_points <- shifted_coords %>%
st_buffer(dist = 10) %>%
st_union() %>%
st_intersection(field_extent)  # Clip buffers by the field extent
# Intersect trees with the buffers
sampled_trees <- tree_inventory_data %>%
st_intersection(buffered_points)
# If there are trees in the buffer, calculate statistics
if (nrow(sampled_trees) > 0) {
mean_dbh <- mean(sampled_trees$dbh, na.rm = TRUE)
total_basal_area <- sum(pi * (sampled_trees$dbh / 200)^2, na.rm = TRUE) / drop_units(st_area(buffered_points)) * 10000
# Count species and calculate percentages
species_counts <- table(sampled_trees$species)
composition <- as.data.frame(species_counts)
colnames(composition) <- c("species", "count")
composition$iteration <- i
composition$percentage <- (composition$count / sum(composition$count)) * 100
composition_list[[i]] <- composition
} else {
mean_dbh <- NA
total_basal_area <- NA
composition_list[[i]] <- data.frame(species = NA, count = NA, iteration = i, percentage = NA)
}
# Store results
results_list[[i]] <- data.frame(
iteration = i,
mean_dbh = mean_dbh,
total_basal_area = total_basal_area,
num_trees = nrow(sampled_trees)
)
}
# Combine all results into a single dataframe
results_df <- bind_rows(results_list)
# Add the baseline measurement to the results dataframe for comparison
baseline_df <- data.frame(
iteration = 0,
mean_dbh = mean_dbh_initial,
total_basal_area = total_basal_area_initial,
num_trees = nrow(sampled_trees_initial)
)
results_df <- bind_rows(baseline_df, results_df)
# Combine all compositions into a single dataframe
composition_df <- bind_rows(composition_list)
#| warning: false
# Plot the results for mean DBH
ggplot(results_df, aes(x = iteration)) +
geom_line(aes(y = mean_dbh), color = "blue", size = 1, show.legend = TRUE) +
geom_point(aes(y = mean_dbh), color = "blue", size = 2) +
geom_hline(yintercept = mean_dbh_initial, color = "blue", linetype = "dashed", size = 1) +
labs(title = "Mean DBH Across Iterations",
x = "Iteration (0 is baseline)", y = "Mean DBH") +
theme_minimal()
# Plot the results for total basal area
ggplot(results_df, aes(x = iteration)) +
geom_line(aes(y = total_basal_area), color = "green", size = 1, show.legend = TRUE) +
geom_point(aes(y = total_basal_area), color = "green", size = 2) +
geom_hline(yintercept = total_basal_area_initial, color = "green", linetype = "dashed", size = 1) +
labs(title = "Total Basal Area Across Iterations",
x = "Iteration (0 is baseline)", y = "Total Basal Area (m²/ha)") +
theme_minimal()
# Plot the composition of tree species across iterations
ggplot(composition_df, aes(x = factor(iteration), y = percentage, fill = species)) +
geom_bar(stat = "identity", position = "fill") +  # Use position = "fill" for percentage stacking
labs(title = "Tree Species Composition Across Iterations",
x = "Iteration", y = "Percentage",
fill = "Species") +
theme_minimal() +
scale_y_continuous(labels = scales::percent_format(scale = 100)) +  # Format y-axis as percentage
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#| label: simple-random-sampling
#| warning: false
#| message: false
library(ggplot2)
library(dplyr)
library(sf)
# Set the parameters for the simulation
num_samples <- 100 # Number of repetitions
num_points <- 5   # Number of random points
# Store the CRS of the tree_inventory_data
tree_crs <- st_crs(tree_inventory_data)
# Total area of the inventory
total_area <- st_area(field_extent)
# Empty list to store results
results_list <- vector("list", num_samples)
# Fix geometries to avoid intersection errors
field_extent <- st_make_valid(field_extent)
field_extent <- st_simplify(field_extent, dTolerance = 0.0001)
# Perform the simulation
for (i in 1:num_samples) {
# Generate random points within the field_extent
random_points <- st_sample(field_extent, size = num_points, type = "random") %>%
st_as_sf() %>%
mutate(id = row_number()) %>%
st_set_crs(st_crs(field_extent)) %>%  # Set the CRS of field_extent
st_transform(tree_crs)  # Transform the CRS to that of tree_inventory_data
# Create a buffer of 12 m around each point and combine with st_union() to avoid overlaps
buffered_points <- random_points %>%
st_buffer(dist = 12) %>%
st_union() %>%
st_make_valid() %>%     # Ensure buffered points are valid
st_simplify(dTolerance = 0.0001)  # Remove duplicate vertices
# Clip the buffered points to the field_extent
clipped_buffers <- st_intersection(buffered_points, field_extent)
buffer_area <- st_area(clipped_buffers)
# Intersection of trees with the buffered points
sampled_trees <- tree_inventory_data %>%
st_transform(tree_crs) %>%  # Ensure the CRS matches
st_make_valid() %>%  # Ensure valid geometries for tree data
st_intersection(clipped_buffers)
# Check if there are trees
if (nrow(sampled_trees) > 0) {
# Summarize results
basal_area_sampled <- sum(pi * (sampled_trees$dbh / 200)^2, na.rm = TRUE) / buffer_area * 10000
mean_dbh <- mean(sampled_trees$dbh, na.rm = TRUE)
# Calculate the area of the buffered region (already without overlaps and within the field_extent)
buffer_area <- st_area(clipped_buffers)
# Calculate the extrapolated basal area to the total area
basal_area_proportional <- drop_units(basal_area_sampled)
} else {
# If no trees are found, set the results to NA
basal_area_proportional <- NA
mean_dbh <- NA
}
# Store results in the list
results_list[[i]] <- data.frame(basal_area_proportional = basal_area_proportional, mean_dbh = mean_dbh, count = nrow(sampled_trees))
# Plot only for the first iteration as an example of what is happening here
if (i == 1) {
ggplot() +
geom_sf(data = field_extent, fill = "lightgrey", alpha = 0.5) + # Field extent
geom_sf(data = sampled_trees, color = "green", size = 2) +      # Sampled trees
geom_sf(data = random_points, color = "blue", size = 3) +       # Random points
geom_sf(data = clipped_buffers, fill = NA, color = "red", linetype = "dashed") + # Buffered area (clipped)
labs(title = "Sample Points and Trees in Field Extent",
subtitle = "Iteration 1",
x = "Longitude", y = "Latitude") +
theme_minimal()
# Show the plot
print(last_plot())
}
}
# Convert results into a DataFrame
results_df <- bind_rows(results_list)
# Calculate deviations (e.g., standard deviations)
final_results <- results_df %>%
summarise(
basal_area_mean = mean(basal_area_proportional, na.rm = TRUE),
basal_area_sd = sd(basal_area_proportional, na.rm = TRUE),
mean_dbh_mean = mean(mean_dbh, na.rm = TRUE),
mean_dbh_sd = sd(mean_dbh, na.rm = TRUE),
sample_count = sum(count) # Total number of trees across all samples
)
# Output the results
print(final_results)
final_results
#| warning: false
true_basal_area <- drop_units(round(total_trunk_area/(st_area(field_extent) / 10000), 2))
# Plot the results for basal area
ggplot(results_df, aes(x = basal_area_proportional)) +
geom_histogram(bins = 30, fill = "lightblue", color = "white") +
labs(title = "Distribution of Basal Area over 100 Samples",
x = "Basal Area (m²/ha)",
y = "Number of Samples") +
geom_vline(aes(xintercept = true_basal_area), color = "red", linetype = "dashed", size = 1) +
annotate("text", x = true_basal_area, y = 1,
label = "True Basal Area", color = "red", vjust = -1)
# Plot the results for mean DBH
ggplot(results_df, aes(x = mean_dbh)) +
geom_histogram(bins = 30, fill = "lightblue", color = "white") +
labs(title = "Distribution of Average DBH over 100 Samples",
x = "Average DBH",
y = "Number of Samples") +
geom_vline(aes(xintercept = mean(tree_inventory_data$dbh, na.rm = TRUE)), color = "red", linetype = "dashed", size = 1) +
annotate("text", x = mean(tree_inventory_data$dbh, na.rm = TRUE), y = 1,
label = "True DBH", color = "red", vjust = -1)
results_df
results_df$basal_area_proportional
sd(results_df$basal_area_proportional) / sqrt(length(results_df$basal_area_proportional))
