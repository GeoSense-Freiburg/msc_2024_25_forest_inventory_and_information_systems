)
# Directly calculate the distance from each point to its centroid using centroid data
data <- data %>%
rowwise() %>%
mutate(
# Find the corresponding centroid for this point
centroid_lat = centroid_data$centroid_lat[centroid_data$Title == Title],
centroid_lon = centroid_data$centroid_lon[centroid_data$Title == Title],
# Calculate distance to the centroid
distance_to_centroid = distGeo(c(Longitude, Latitude), c(centroid_lon, centroid_lat))  # Distance in meters
)
# Calculate variance of distance from centroid for each point (in meters) and include sky obscurance
variance_data <- data %>%
group_by(Title, avg_sky_obscurance) %>%  # Include Description (sky obscurance)
summarise(
variance_distance = var(distance_to_centroid),  # Variance of distance in meters
avg_distance = mean(distance_to_centroid),  # Mean distance to centroid
sky_obscurance = first(Description)  # Keep the sky obscurance value for each point
)
# Preview the variance data
print(variance_data)
# Plot: Sky Obscurance vs Variance in GPS Precision
ggplot(variance_data, aes(x = avg_sky_obscurance, y = variance_distance)) +
geom_point(color = "blue", size = 3) +  # Plot points for variance
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add a trendline
geom_text(aes(label = Title), hjust = 1.2, vjust = 0, size = 3) +  # Add point names
theme_minimal() +
labs(title = "Variance in GPS Precision vs Sky Obscurance",
x = "Sky Obscurance (in tenths, e.g. 5 = 50%)",
y = "Variance in Distance (meters)")
library(geosphere)  # For calculating distances in meters
# Calculate the centroid (mean latitude and longitude) for each point (Title)
centroid_data <- data %>%
group_by(Title) %>%
summarise(
centroid_lat = mean(Latitude),
centroid_lon = mean(Longitude)
)
# Directly calculate the distance from each point to its centroid using centroid data
data <- data %>%
rowwise() %>%
mutate(
# Find the corresponding centroid for this point
centroid_lat = centroid_data$centroid_lat[centroid_data$Title == Title],
centroid_lon = centroid_data$centroid_lon[centroid_data$Title == Title],
# Calculate distance to the centroid
distance_to_centroid = distGeo(c(Longitude, Latitude), c(centroid_lon, centroid_lat))  # Distance in meters
)
# Calculate variance of distance from centroid for each point (in meters) and include sky obscurance
variance_data <- data %>%
group_by(Title, avg_sky_obscurance) %>%  # Include Description (sky obscurance)
summarise(
variance_distance = var(distance_to_centroid),  # Variance of distance in meters
avg_distance = mean(distance_to_centroid),  # Mean distance to centroid
sky_obscurance = first(Description)  # Keep the sky obscurance value for each point
)
# Preview the variance data
print(variance_data)
# Plot: Sky Obscurance vs Variance in GPS Precision
ggplot(variance_data, aes(x = avg_sky_obscurance, y = variance_distance)) +
geom_point(color = "blue", size = 3) +  # Plot points for variance
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add a trendline
geom_text(aes(label = Title), hjust = 2, vjust = 2, size = 3) +  # Add point names
theme_minimal() +
labs(title = "Variance in GPS Precision vs Sky Obscurance",
x = "Sky Obscurance (in tenths, e.g. 5 = 50%)",
y = "Variance in Distance (meters)")
data
variance_data
library(geosphere)  # For calculating distances in meters
# Calculate the centroid (mean latitude and longitude) for each point (Title)
centroid_data <- data %>%
group_by(Title) %>%
summarise(
centroid_lat = mean(Latitude),
centroid_lon = mean(Longitude)
)
# Directly calculate the distance from each point to its centroid using centroid data
data <- data %>%
rowwise() %>%
mutate(
# Find the corresponding centroid for this point
centroid_lat = centroid_data$centroid_lat[centroid_data$Title == Title],
centroid_lon = centroid_data$centroid_lon[centroid_data$Title == Title],
# Calculate distance to the centroid
distance_to_centroid = distGeo(c(Longitude, Latitude), c(centroid_lon, centroid_lat))  # Distance in meters
)
# Calculate variance of distance from centroid for each point (in meters) and include sky obscurance
variance_data <- data %>%
group_by(Title, avg_sky_obscurance) %>%  # Include Description (sky obscurance)
summarise(
variance_distance = var(distance_to_centroid),  # Variance of distance in meters
avg_distance = mean(distance_to_centroid),  # Mean distance to centroid
sky_obscurance = first(Description)  # Keep the sky obscurance value for each point
)
# Preview the variance data
print(variance_data)
# Plot: Sky Obscurance vs Variance in GPS Precision
ggplot(variance_data, aes(x = avg_sky_obscurance, y = avg_distance)) +
geom_point(color = "blue", size = 3) +  # Plot points for variance
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add a trendline
geom_text(aes(label = Title), hjust = 2, vjust = 2, size = 3) +  # Add point names
theme_minimal() +
labs(title = "Average distance to centroid in GPS Precision vs Average Sky Obscurance",
x = "Sky Obscurance (in tenths, e.g. 5 = 50%)",
y = "Variance in Distance (meters)")
library(geosphere)  # For calculating distances in meters
# Calculate the centroid (mean latitude and longitude) for each point (Title)
centroid_data <- data %>%
group_by(Title) %>%
summarise(
centroid_lat = mean(Latitude),
centroid_lon = mean(Longitude)
)
# Directly calculate the distance from each point to its centroid using centroid data
data <- data %>%
rowwise() %>%
mutate(
# Find the corresponding centroid for this point
centroid_lat = centroid_data$centroid_lat[centroid_data$Title == Title],
centroid_lon = centroid_data$centroid_lon[centroid_data$Title == Title],
# Calculate distance to the centroid
distance_to_centroid = distGeo(c(Longitude, Latitude), c(centroid_lon, centroid_lat))  # Distance in meters
)
# Calculate variance of distance from centroid for each point (in meters) and include sky obscurance
variance_data <- data %>%
group_by(Title, avg_sky_obscurance) %>%  # Include Description (sky obscurance)
summarise(
variance_distance = var(distance_to_centroid),  # Variance of distance in meters
avg_distance = mean(distance_to_centroid),  # Mean distance to centroid
sky_obscurance = first(Description)  # Keep the sky obscurance value for each point
)
# Preview the variance data
print(variance_data)
# Plot: Sky Obscurance vs Variance in GPS Precision
ggplot(variance_data, aes(x = avg_sky_obscurance, y = avg_distance)) +
geom_point(color = "blue", size = 3) +  # Plot points for variance
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add a trendline
geom_text(aes(label = Title), hjust = 2, vjust = 2, size = 3) +  # Add point names
theme_minimal() +
labs(title = "Average distance to centroid in GPS Precision vs Average Sky Obscurance",
x = "Sky Obscurance (in tenths, e.g. 5 = 50%)",
y = "Average distance (meters) from centroid")
library(geosphere)  # For calculating distances in meters
# Calculate the centroid (mean latitude and longitude) for each point (Title)
centroid_data <- data %>%
group_by(Title) %>%
summarise(
centroid_lat = mean(Latitude),
centroid_lon = mean(Longitude)
)
# Directly calculate the distance from each point to its centroid using centroid data
data <- data %>%
rowwise() %>%
mutate(
# Find the corresponding centroid for this point
centroid_lat = centroid_data$centroid_lat[centroid_data$Title == Title],
centroid_lon = centroid_data$centroid_lon[centroid_data$Title == Title],
# Calculate distance to the centroid
distance_to_centroid = distGeo(c(Longitude, Latitude), c(centroid_lon, centroid_lat))  # Distance in meters
)
# Calculate variance of distance from centroid for each point (in meters) and include sky obscurance
variance_data <- data %>%
group_by(Title, avg_sky_obscurance) %>%  # Include Description (sky obscurance)
summarise(
variance_distance = var(distance_to_centroid),  # Variance of distance in meters
avg_distance = mean(distance_to_centroid),  # Mean distance to centroid
sky_obscurance = first(Description)  # Keep the sky obscurance value for each point
)
# Preview the variance data
print(variance_data)
# Plot: Sky Obscurance vs Variance in GPS Precision
ggplot(variance_data, aes(x = avg_sky_obscurance, y = avg_distance)) +
geom_point(color = "blue", size = 3) +  # Plot points for variance
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add a trendline
geom_text(aes(label = Title), hjust = 2, vjust = 2, size = 3) +  # Add point names
theme_minimal() +
labs(title = "Average distance to centroid in GPS Precision vs Average Sky Obscurance",
x = "Sky Obscurance",
y = "Average distance (meters) from centroid")
library(geosphere)  # For calculating distances in meters
# Calculate the centroid (mean latitude and longitude) for each point (Title)
centroid_data <- data %>%
group_by(Title) %>%
summarise(
centroid_lat = mean(Latitude),
centroid_lon = mean(Longitude)
)
# Directly calculate the distance from each point to its centroid using centroid data
data <- data %>%
rowwise() %>%
mutate(
# Find the corresponding centroid for this point
centroid_lat = centroid_data$centroid_lat[centroid_data$Title == Title],
centroid_lon = centroid_data$centroid_lon[centroid_data$Title == Title],
# Calculate distance to the centroid
distance_to_centroid = distGeo(c(Longitude, Latitude), c(centroid_lon, centroid_lat))  # Distance in meters
)
# Calculate variance of distance from centroid for each point (in meters) and include sky obscurance
variance_data <- data %>%
group_by(Title, avg_sky_obscurance) %>%  # Include Description (sky obscurance)
summarise(
variance_distance = var(distance_to_centroid),  # Variance of distance in meters
avg_distance = mean(distance_to_centroid),  # Mean distance to centroid
sky_obscurance = first(Description)  # Keep the sky obscurance value for each point
)
# Preview the variance data
print(variance_data)
# Plot: Sky Obscurance vs Variance in GPS Precision
ggplot(variance_data, aes(x = avg_sky_obscurance, y = avg_distance)) +
geom_point(color = "blue", size = 3) +  # Plot points for variance
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add a trendline
geom_text(aes(label = Title), hjust = 2, vjust = 2, size = 3) +  # Add point names
theme_minimal() +
labs(title = "Average distance to centroid in GPS Precision vs Average Sky Obscurance",
x = "Sky Obscurance (in %)",
y = "Average distance (meters) from centroid")
#install.packages(c("ggplot2", "leaflet", "dplyr", "readr", "sf"))
library(readr)
library(dplyr)
# Assuming your CSV files are in a directory called "data"
# You can read multiple CSV files into a list and combine them
file_list <- list.files(path = "/Users/maximilianfabi/Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/data/csv-files", pattern = "*.csv", full.names = TRUE)
# Read and combine all the CSV files
data <- lapply(file_list, read_csv) %>%
bind_rows()
# Preview the combined data
head(data)
# Convert the cover to a percentage
data <- data %>%
mutate(sky_cover = as.numeric(Description) * 10)  # Convert to percentage
# Remove rows with missing or invalid latitude/longitude
data <- data %>%
filter(!is.na(Latitude), !is.na(Longitude))
# Calculate the average sky cover for each point (group by Title)
data <- data %>%
group_by(Title) %>%
mutate(avg_sky_cover = mean(sky_cover, na.rm = TRUE)) %>%
ungroup()
# Preview the cleaned data
head(data)
library(ggplot2)
ggplot(data, aes(x = Longitude, y = Latitude, color = sky_cover)) +
geom_point(size = 3) +
scale_color_gradient(low = "blue", high = "red") +  # Color scale for cover
theme_minimal() +
labs(title = "GPS Precision vs Sky cover",
color = "Sky cover (%)",
x = "Longitude", y = "Latitude")
library(leaflet)
leaflet(data) %>%
addTiles() %>%
addCircleMarkers(~Longitude, ~Latitude,
color = ~colorNumeric("YlOrRd", sky_cover)(sky_cover),
popup = ~paste("Title:", Title, "<br>", "Sky cover:", sky_cover, "%")) %>%
addLegend("bottomright", pal = colorNumeric("YlOrRd", data$sky_cover),
values = data$sky_cover,
title = "Sky cover (%)",
opacity = 1)
library(leaflet)
library(RColorBrewer)
# Generate a color palette for each unique Title
color_palette <- colorFactor(palette = brewer.pal(n = length(unique(data$Title)), "Set1"), domain = data$Title)
# Create the leaflet map
leaflet(data) %>%
addTiles(options = tileOptions(maxZoom = 22)) %>%
# Add circle markers, colored by Title
addCircleMarkers(
~Longitude, ~Latitude,
color = ~color_palette(Title),
popup = ~paste("Title:", Title),
radius = 6
) %>%
# Add a legend for the Title colors
addLegend(
"bottomright",
pal = color_palette,
values = data$Title,
title = "Point name",
opacity = 1
)
library(geosphere)  # For calculating distances in meters
# Calculate the centroid (mean latitude and longitude) for each point (Title)
centroid_data <- data %>%
group_by(Title) %>%
summarise(
centroid_lat = mean(Latitude),
centroid_lon = mean(Longitude)
)
# Directly calculate the distance from each point to its centroid using centroid data
data <- data %>%
rowwise() %>%
mutate(
# Find the corresponding centroid for this point
centroid_lat = centroid_data$centroid_lat[centroid_data$Title == Title],
centroid_lon = centroid_data$centroid_lon[centroid_data$Title == Title],
# Calculate distance to the centroid
distance_to_centroid = distGeo(c(Longitude, Latitude), c(centroid_lon, centroid_lat))  # Distance in meters
)
# Calculate variance of distance from centroid for each point (in meters) and include sky cover
variance_data <- data %>%
group_by(Title, avg_sky_cover) %>%  # Include Description (sky cover)
summarise(
variance_distance = var(distance_to_centroid),  # Variance of distance in meters
avg_distance = mean(distance_to_centroid),  # Mean distance to centroid
sky_cover = first(Description)  # Keep the sky cover value for each point
)
# Preview the variance data
print(variance_data)
# Plot: Sky cover vs Variance in GPS Precision
ggplot(variance_data, aes(x = avg_sky_cover, y = avg_distance)) +
geom_point(color = "blue", size = 3) +  # Plot points for variance
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add a trendline
geom_text(aes(label = Title), hjust = 2, vjust = 2, size = 3) +  # Add point names
theme_minimal() +
labs(title = "Average distance to centroid in GPS Precision vs Average Sky cover",
x = "Sky cover (in %)",
y = "Average distance (meters) from centroid")
library(leaflet)
library(RColorBrewer)
library(htmltools)
# Create the first leaflet map (Sky Cover)
map1 <- leaflet(data) %>%
addTiles() %>%
addCircleMarkers(~Longitude, ~Latitude,
color = ~colorNumeric("YlOrRd", sky_cover)(sky_cover),
popup = ~paste("Title:", Title, "<br>", "Sky cover:", sky_cover, "%")) %>%
addLegend("bottomright", pal = colorNumeric("YlOrRd", data$sky_cover),
values = data$sky_cover,
title = "Sky cover (%)",
opacity = 1)
# Create the second leaflet map (Point Name)
# Generate a color palette for each unique Title
color_palette <- colorFactor(palette = brewer.pal(n = length(unique(data$Title)), "Set1"), domain = data$Title)
map2 <- leaflet(data) %>%
addTiles(options = tileOptions(maxZoom = 22)) %>%
addCircleMarkers(
~Longitude, ~Latitude,
color = ~color_palette(Title),
popup = ~paste("Title:", Title),
radius = 6
) %>%
addLegend(
"bottomright",
pal = color_palette,
values = data$Title,
title = "Point Name",
opacity = 1
)
# Create a synchronized container for the maps
html_page <- tags$div(
style = "display: flex; justify-content: space-around;",
tags$div(style = "width: 50%;", map1$dependencies, map1$elementId),
tags$div(style = "width: 50%;", map2$dependencies, map2$elementId)
)
# Render the maps with JavaScript for synchronization
htmltools::browsable(
html_page
)
# Add the JavaScript for synchronization
htmltools::htmlDependency(
name = "leaflet-sync",
version = "0.1",
src = c(file = "path/to/your/js/folder"),
script = "leaflet-sync.js"
)
library(ggplot2)
# Plot: Sky Cover vs Variance in GPS Precision as Boxplot
ggplot(variance_data, aes(x = factor(avg_sky_cover), y = avg_distance)) +  # Use factor for categorical x-axis
geom_boxplot(fill = "lightblue", outlier.colour = "blue", outlier.size = 1) +  # Boxplot
geom_jitter(color = "blue", size = 1, alpha = 0.5) +  # Add jittered points for individual data
geom_smooth(aes(group = 1), method = "lm", se = FALSE, color = "red") +  # Add a trendline
theme_minimal() +
labs(title = "Average Distance to Centroid in GPS Precision vs Average Sky Cover",
x = "Sky Cover (in %)",
y = "Average Distance (meters) from Centroid") +
scale_x_discrete(labels = unique(variance_data$avg_sky_cover))  # Adjust x-axis labels if needed
variance_data
data
# Install required packages (if not already installed)
# install.packages("readxl")
# install.packages("dplyr")
library(readxl)
library(dplyr)
# Read the source file (containing "noten")
source_data <- read_excel("/Volumes/unfnrd02/teaching/einfuehrung_in_geomatik_ba/SS_2024/FINAL_2024/Teilnehmerlisten_Pruefung_SS2024/Gesamt_Teilnehmerliste_10LE07PL-658-B1107_SS_2024_Einführung_in_die_Geomatik_mit_NOTEN.xlsx")
# Read the target file (containing "Bewertung")
target_data <- read_excel("/Volumes/unfnrd02/teaching/einfuehrung_in_geomatik_ba/SS_2024/FINAL_2024/Teilnehmerlisten_Pruefung_SS2024/10LE07V-B.1107_2108_61296-Einführung_in_die_Geomatik-SS_2024.xlsx")
# Merge the data based on "Matrikelnummer"
combined_data <- target_data %>%
left_join(source_data %>% select(Matrikelnummer, noten), by = "Matrikelnummer")
head(source_data)
head(target_data)
shiny::runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='geosense', token='AE857ADE4D82D551C73A2DAA379A7142', secret='NjnUyNpm039q9PWt1s42IeicaxaNIO+nWjiZ713F')
library(rsconnect)
rsconnect::deployApp('app.R')
pdw
pwd
rsconnect::deployApp("~/Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture/app.R")
library(rsconnect)
rsconnect::deployApp("/Users/maximilianfabi/Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture/app.R")
library(rsconnect)
rsconnect::deployApp("/Users/maximilianfabi/Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture")
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
shiny::runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
install.packages("stringr")
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
# Generate the datasets
generate_datasets(example_data, n_files = 5, max_dist = 10)
library(dplyr)
library(readr)
# Function to add noise to latitude and longitude
generate_noise <- function(lat, lon, obscurance, max_dist = 10) {
displacement_factor <- (obscurance / 10) * max_dist
lat_offset <- (displacement_factor / 111320)
lon_offset <- (displacement_factor / (111320 * cos(lat * pi / 180)))
lat_new <- lat + runif(1, -lat_offset, lat_offset)
lon_new <- lon + runif(1, -lon_offset, lon_offset)
return(c(lat_new, lon_new))
}
# Function to generate n versions of the dataset with noisy coordinates
generate_datasets <- function(data, n_files = 5, max_dist = 10) {
for (i in 1:n_files) {
noisy_data <- data %>%
rowwise() %>%
mutate(
new_coords = list(generate_noise(Latitude, Longitude, Description, max_dist)),
Latitude = new_coords[[1]],
Longitude = new_coords[[2]]
) %>%
ungroup() %>%
select(-new_coords)
write_csv(noisy_data, paste0("04_accuracy_inventory/data/csv-files/noisy_data_", i, ".csv"))
}
}
# Read the example dataset
example_data <- read_csv("03.csv")
library(dplyr)
library(readr)
# Read the example dataset
example_data <- read_csv("/Users/maximilianfabi/Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/data/csv-files/03.csv")
# Function to add noise to latitude and longitude
generate_noise <- function(lat, lon, obscurance, max_dist = 10) {
# Maximum displacement is 10 meters when obscurance is 10 (100% obscurance)
# Displacement scales linearly with obscurance (in tenths)
displacement_factor <- (obscurance / 10) * max_dist
# Convert meters to degrees for latitude and longitude
# Approximation: 1 degree latitude ≈ 111.32 km, 1 degree longitude ≈ 111.32 km * cos(latitude)
lat_offset <- (displacement_factor / 111320)  # Meters to degrees latitude
lon_offset <- (displacement_factor / (111320 * cos(lat * pi / 180)))  # Meters to degrees longitude
# Randomly change the sign of the offset (to scatter in all directions)
lat_new <- lat + runif(1, -lat_offset, lat_offset)
lon_new <- lon + runif(1, -lon_offset, lon_offset)
return(c(lat_new, lon_new))
}
# Function to generate n versions of the dataset with noisy coordinates
generate_datasets <- function(data, n_files = 5, max_dist = 10) {
for (i in 1:n_files) {
# Apply noise to latitude and longitude based on obscurance
noisy_data <- data %>%
rowwise() %>%
mutate(
new_coords = list(generate_noise(Latitude, Longitude, Description, max_dist)),
Latitude = new_coords[[1]],
Longitude = new_coords[[2]]
) %>%
ungroup() %>%
select(-new_coords)  # Remove the temporary list column
# Write each altered dataset to a new CSV file
write_csv(noisy_data, paste0("/Users/maximilianfabi/Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/data/csv-files/noisy_data_", i, ".csv"))
}
}
# Generate 5 versions of the dataset with altered GPS coordinates
generate_datasets(example_data, n_files = 5, max_dist = 10)
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
shiny::runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/04_accuracy_inventory/lecture')
rsconnect::deployApp('app.R')
file.edit("~/.Rprofile")
file.edit("~/.Rprofile")
shiny::runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/03_gnss/exercises/data/shinyapp-03')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/03_gnss/exercises/data/shinyapp-03')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/03_gnss/exercises/data/shinyapp-03')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/03_gnss/exercises/data/shinyapp-03')
runApp('Desktop/_repos/bsc_2024_25_teaching_inventur_und_geomatik/03_gnss/exercises/data/shinyapp-03')
setwd("~/Desktop/_repos/msc_2024_25_forest_inventory_and_information_systems/03_gnss/exercises/data/shinyapp-03-msc")
rsconnect::deployApp()
rsconnect::deployApp()
